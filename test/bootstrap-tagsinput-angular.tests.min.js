describe("bootstrap-tagsinput", function () {
    beforeEach(module("bootstrap-tagsinput"));
    describe("with strings as items", function () {
        describe("compile with 2 tags in model", function () {
            var b, a;
            beforeEach(inject(function (d, c) {
                b = c;
                b.tags = ["Amsterdam", "New York"];
                a = d(angular.element('<bootstrap-tagsinput ng-model="tags" />'))(b);
                b.$digest()
            }));
            it("should hide the element", function () {
                expect(a.is(":visible")).toBe(false)
            });
            it("should have 2 tags", function () {
                expect($(".tag", a).length).toBe(2)
            })
        })
    });
    describe("with objects as items", function () {
        describe("compile with 2 tags in model", function () {
            var b, a;
            beforeEach(inject(function (d, c) {
                b = c;
                b.tags = [{value: 1, text: "Amsterdam"}, {value: 2, text: "New York"}];
                a = d(angular.element('<bootstrap-tagsinput ng-model="tags" itemvalue="value" itemtext="text"/>'))(b);
                b.$digest()
            }));
            it("should hide the element", function () {
                expect(a.is(":visible")).toBe(false)
            });
            it("should have 2 tags", function () {
                expect($(".tag", a).length).toBe(2)
            });
            describe("changing a tag's text", function () {
                beforeEach(function () {
                    b.tags[0].text = "Paris";
                    b.$digest()
                });
                it("should update tag's text", function () {
                    expect($(".tag", a).first().text()).toBe("Paris")
                })
            });
            describe("adding an item to the model", function () {
                beforeEach(function () {
                    b.tags.push({value: 3, text: "Beijing"});
                    b.$digest()
                });
                it("should add a tag", function () {
                    expect($(".tag", a).length).toBe(3)
                })
            });
            describe("BACKSPACE", function () {
                beforeEach(function () {
                    a.tagsinput("focus")
                });
                it("after last tag, should remove item from model", function () {
                    $("input", a).trigger($.Event("keydown", {which: 8}));
                    b.$digest();
                    expect(b.tags.length).toBe(1)
                })
            })
        })
    })
});